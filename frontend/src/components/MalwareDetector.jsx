import React, { useState } from 'react';
import { AlertTriangle, Shield, Activity, Clock, Wifi, HardDrive, Monitor, Zap } from 'lucide-react';

const MalwareDetector = () => {
  const [symptoms, setSymptoms] = useState({});
  const [prediction, setPrediction] = useState(null);
  const [loading, setLoading] = useState(false);

  // Daftar gejala malware dengan kategori
  const symptomsList = [
    { id: 'slow_performance', label: 'Kinerja komputer sangat lambat', icon: Clock, category: 'Performance' },
    { id: 'frequent_crashes', label: 'Sering terjadi crash atau blue screen', icon: AlertTriangle, category: 'Performance' },
    { id: 'pop_ups', label: 'Banyak pop-up atau iklan muncul', icon: Monitor, category: 'Display' },
    { id: 'unknown_programs', label: 'Ada program yang tidak dikenal berjalan', icon: Activity, category: 'System' },
    { id: 'high_cpu_usage', label: 'Penggunaan CPU sangat tinggi tanpa sebab', icon: Zap, category: 'Performance' },
    { id: 'network_activity', label: 'Aktivitas jaringan mencurigakan', icon: Wifi, category: 'Network' },
    { id: 'disk_usage', label: 'Ruang disk berkurang drastis', icon: HardDrive, category: 'Storage' },
    { id: 'browser_redirect', label: 'Browser sering redirect ke situs aneh', icon: Monitor, category: 'Network' },
    { id: 'antivirus_disabled', label: 'Antivirus tiba-tiba dinonaktifkan', icon: Shield, category: 'Security' },
    { id: 'new_toolbars', label: 'Toolbar browser baru muncul sendiri', icon: Monitor, category: 'Display' },
    { id: 'password_changed', label: 'Password akun berubah sendiri', icon: Shield, category: 'Security' },
    { id: 'email_sent', label: 'Email terkirim dari akun tanpa sepengetahuan', icon: Activity, category: 'Security' }
  ];

  const handleSymptomChange = (symptomId) => {
    setSymptoms(prev => ({
      ...prev,
      [symptomId]: !prev[symptomId]
    }));
  };

  // Simulasi Naive Bayes Classifier
  const simulateNaiveBayesPredict = (selectedSymptoms) => {
    // Prior probabilities
    const priorHigh = 0.25;
    const priorMedium = 0.35;
    const priorLow = 0.40;

    // Likelihood probabilities untuk setiap gejala berdasarkan kategori risiko
    const likelihoods = {
      high: {
        slow_performance: 0.85, frequent_crashes: 0.90, pop_ups: 0.95,
        unknown_programs: 0.88, high_cpu_usage: 0.82, network_activity: 0.78,
        disk_usage: 0.75, browser_redirect: 0.92, antivirus_disabled: 0.95,
        new_toolbars: 0.88, password_changed: 0.93, email_sent: 0.89
      },
      medium: {
        slow_performance: 0.60, frequent_crashes: 0.45, pop_ups: 0.70,
        unknown_programs: 0.55, high_cpu_usage: 0.65, network_activity: 0.50,
        disk_usage: 0.40, browser_redirect: 0.65, antivirus_disabled: 0.35,
        new_toolbars: 0.60, password_changed: 0.25, email_sent: 0.30
      },
      low: {
        slow_performance: 0.25, frequent_crashes: 0.15, pop_ups: 0.20,
        unknown_programs: 0.18, high_cpu_usage: 0.30, network_activity: 0.22,
        disk_usage: 0.35, browser_redirect: 0.15, antivirus_disabled: 0.08,
        new_toolbars: 0.25, password_changed: 0.05, email_sent: 0.10
      }
    };

    // Hitung posterior probability untuk setiap kelas
    let posteriorHigh = Math.log(priorHigh);
    let posteriorMedium = Math.log(priorMedium);
    let posteriorLow = Math.log(priorLow);

    Object.keys(selectedSymptoms).forEach(symptom => {
      if (selectedSymptoms[symptom]) {
        posteriorHigh += Math.log(likelihoods.high[symptom] || 0.5);
        posteriorMedium += Math.log(likelihoods.medium[symptom] || 0.5);
        posteriorLow += Math.log(likelihoods.low[symptom] || 0.5);
      } else {
        posteriorHigh += Math.log(1 - (likelihoods.high[symptom] || 0.5));
        posteriorMedium += Math.log(1 - (likelihoods.medium[symptom] || 0.5));
        posteriorLow += Math.log(1 - (likelihoods.low[symptom] || 0.5));
      }
    });

    // Konversi kembali dari log dan normalisasi
    const expHigh = Math.exp(posteriorHigh);
    const expMedium = Math.exp(posteriorMedium);
    const expLow = Math.exp(posteriorLow);
    const total = expHigh + expMedium + expLow;

    const probHigh = expHigh / total;
    const probMedium = expMedium / total;
    const probLow = expLow / total;

    // Tentukan prediksi berdasarkan probabilitas tertinggi
    let prediction, confidence;
    if (probHigh > probMedium && probHigh > probLow) {
      prediction = 'Tinggi';
      confidence = probHigh * 100;
    } else if (probMedium > probLow) {
      prediction = 'Sedang';
      confidence = probMedium * 100;
    } else {
      prediction = 'Rendah';
      confidence = probLow * 100;
    }

    return {
      prediction,
      confidence: Math.round(confidence * 100) / 100,
      probabilities: {
        high: Math.round(probHigh * 10000) / 100,
        medium: Math.round(probMedium * 10000) / 100,
        low: Math.round(probLow * 10000) / 100
      }
    };
  };

  const handlePredict = async () => {
    setLoading(true);
    
    // Simulasi delay API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const selectedSymptoms = Object.keys(symptoms).filter(key => symptoms[key]);
    
    if (selectedSymptoms.length === 0) {
      alert('Pilih minimal satu gejala untuk melakukan deteksi!');
      setLoading(false);
      return;
    }

    const result = simulateNaiveBayesPredict(symptoms);
    setPrediction(result);
    setLoading(false);
  };

  const getRiskColor = (level) => {
    switch(level) {
      case 'Tinggi': return 'text-red-600 bg-red-50 border-red-200';
      case 'Sedang': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'Rendah': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getSuggestion = (level) => {
    switch(level) {
      case 'Tinggi':
        return 'SEGERA lakukan scan antivirus lengkap, putuskan koneksi internet jika diperlukan, dan pertimbangkan untuk memformat ulang sistem.';
      case 'Sedang':
        return 'Lakukan scan antivirus, update sistem operasi, dan periksa program yang berjalan di background.';
      case 'Rendah':
        return 'Sistem relatif aman, tapi tetap lakukan maintenance rutin dan update antivirus secara berkala.';
      default:
        return '';
    }
  };

  const categoryColors = {
    'Performance': 'bg-blue-100 text-blue-800',
    'Display': 'bg-purple-100 text-purple-800',
    'System': 'bg-green-100 text-green-800',
    'Network': 'bg-orange-100 text-orange-800',
    'Storage': 'bg-pink-100 text-pink-800',
    'Security': 'bg-red-100 text-red-800'
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="flex justify-center items-center mb-4">
              <Shield className="w-12 h-12 text-blue-400 mr-3" />
              <h1 className="text-4xl font-bold text-white">Malware Detector</h1>
            </div>
            <p className="text-blue-200 text-lg">
              Deteksi Kemungkinan Infeksi Malware menggunakan Naive Bayes Classifier
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Input Section */}
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <h2 className="text-2xl font-semibold text-white mb-6 flex items-center">
                <Activity className="w-6 h-6 mr-2" />
                Pilih Gejala yang Dialami
              </h2>
              
              <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
                {symptomsList.map((symptom) => {
                  const IconComponent = symptom.icon;
                  return (
                    <div
                      key={symptom.id}
                      className={`flex items-center p-4 rounded-xl border-2 transition-all duration-200 cursor-pointer hover:shadow-lg ${
                        symptoms[symptom.id]
                          ? 'bg-blue-500/20 border-blue-400'
                          : 'bg-white/5 border-white/10 hover:bg-white/10'
                      }`}
                      onClick={() => handleSymptomChange(symptom.id)}
                    >
                      <input
                        type="checkbox"
                        checked={symptoms[symptom.id] || false}
                        onChange={() => handleSymptomChange(symptom.id)}
                        className="w-5 h-5 text-blue-600 rounded mr-3"
                      />
                      <IconComponent className="w-5 h-5 text-blue-400 mr-3 flex-shrink-0" />
                      <div className="flex-1">
                        <label className="text-white font-medium cursor-pointer">
                          {symptom.label}
                        </label>
                        <span className={`inline-block mt-1 px-2 py-1 rounded-full text-xs font-medium ${categoryColors[symptom.category]}`}>
                          {symptom.category}
                        </span>
                      </div>
                    </div>
                  );
                })}
              </div>

              <button
                onClick={handlePredict}
                disabled={loading}
                className="w-full mt-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-600 text-white font-bold py-4 px-6 rounded-xl transition-all duration-200 transform hover:scale-105 disabled:scale-100 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white mr-3"></div>
                    Menganalisis...
                  </div>
                ) : (
                  'Cek Sekarang'
                )}
              </button>
            </div>

            {/* Result Section */}
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <h2 className="text-2xl font-semibold text-white mb-6 flex items-center">
                <AlertTriangle className="w-6 h-6 mr-2" />
                Hasil Analisis
              </h2>

              {prediction ? (
                <div className="space-y-6">
                  {/* Main Prediction */}
                  <div className={`p-6 rounded-xl border-2 ${getRiskColor(prediction.prediction)}`}>
                    <h3 className="text-xl font-bold mb-2">
                      Kemungkinan Terkena Malware: {prediction.prediction}
                    </h3>
                    <p className="text-2xl font-bold">
                      Confidence: {prediction.confidence}%
                    </p>
                  </div>

                  {/* Probability Breakdown */}
                  <div className="bg-white/5 rounded-xl p-4">
                    <h4 className="text-white font-semibold mb-3">Detail Probabilitas:</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-red-300">Risiko Tinggi:</span>
                        <span className="text-white font-mono">{prediction.probabilities.high}%</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-yellow-300">Risiko Sedang:</span>
                        <span className="text-white font-mono">{prediction.probabilities.medium}%</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-green-300">Risiko Rendah:</span>
                        <span className="text-white font-mono">{prediction.probabilities.low}%</span>
                      </div>
                    </div>
                  </div>

                  {/* Suggestion */}
                  <div className="bg-white/5 rounded-xl p-4">
                    <h4 className="text-white font-semibold mb-2">Rekomendasi:</h4>
                    <p className="text-blue-200">
                      {getSuggestion(prediction.prediction)}
                    </p>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <Shield className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-400 text-lg">
                    Pilih gejala yang dialami dan klik "Cek Sekarang" untuk melihat hasil analisis
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Footer Info */}
          <div className="mt-8 text-center">
            <div className="bg-white/5 backdrop-blur-lg rounded-xl p-4 border border-white/10">
              <p className="text-blue-200 text-sm">
                🔬 <strong>Algoritma:</strong> Naive Bayes Classifier dengan probabilitas prior dan likelihood yang telah dioptimalkan
              </p>
              <p className="text-blue-300 text-xs mt-2">
                Akurasi model: ~87% berdasarkan dataset simulasi dengan 12 parameter gejala malware
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MalwareDetector;